<?php

use Drupal\node\Entity\Node;
use \Drupal\Component\Utility\Html;
use Drupal\dd_bill_alerts\Bill;
use Drupal\dd_bill_alerts\BillAlert;
use Drupal\dd_bill_alerts\User;
use Drupal\dd_base\DdBase;

// Runs Bill Alerts. Called by cron hook.
function  dd_bill_alerts_run() {
  $offset = $offset = \Drupal::configFactory()->getEditable('dd_bill_alerts.settings')
    ->get('datetime.back_date_text');
  $state = DdBase::getCurrentState();
  $session_year = DdBase::getSessionYear(date("Y",strtotime("now")));

  // Create arrays to contain lists of users and bills
  $users = array();
  $bills = array();

  // Pull the current dd_bill_alert nodes from Drupal
  $alert_nodes = BillAlert::get_bill_alert_nodes();

  // Get the whitelabel_id
  $wl_id = \Drupal\dd_base\DdBase::getWhiteLabelId();

  // Get path of logo
  $logo = theme_get_setting('logo.url', 'dd');

  // Loop through each dd_bill_alert
  foreach($alert_nodes as $alert_node) {

    // If the alert isn't valid then skip it
    if(!BillAlert::validate_bill_alert_node($alert_node)) {
      continue;
    }

    // Get the bill type and number from the dd_bill_alert node
    $bill_type = $alert_node->field_bill_type->value;
    $bill_number = $alert_node->field_bill_number->value;

    try {
      // Use the bill type and number to find the bill id
      $bill_id = Bill::lookup_bill_id($bill_type, $bill_number, $state, $session_year);
    }
    catch (\Exception $exception) {
      \Drupal::logger('dd_bill_alerts')
        ->warning("Bad bill in alert found: nid=" . $alert_node->id() . " : " . $bill_type . $bill_number);
      continue;
    }

    #echo "Processing bill " . $bill_id . "\n";

    // If the bill isn't already in our list then construct and add it
    if(!isset($bills[$bill_id])) {
      $bills[$bill_id] = new Bill($bill_type, $bill_number, $state, $session_year);
    }

    // Get the user id from the dd_bill_alert node
    $user_id = $alert_node->get('uid')->first()->target_id;

    // If that user isn't already in our list then construct and add it
    if(!isset($users[$user_id])) {
      $users[$user_id] = new User($user_id);
    }

    // Construct a BillAlert and if it has results then add it to the user
    $alert = new BillAlert(
      $alert_node->title->value, $bills[$bill_id],
      $alert_node->field_receive_alerts_for_votes->value,
      $alert_node->field_receive_alerts_for_schedul->value,
      $alert_node->field_receive_alerts_for_videos->value,
      $alert_node->field_alert_me_when_bill_is_amen->value
    );
    if(BillAlert::hasResults($alert, $offset)) {
      #echo "Alert " . $user_id . " for " . $bill_id . "\n";
      $users[$user_id]->add_alert($alert);
    }
  }
  // Loop through each user
  foreach ($users as $user) {
    #echo "Alert " . $user->getId() . " for \n";
    // Copy appropriate results for this user
    $user->fill_results($bills, $offset);
    if (!$user->hasResults()) {
      continue;
    }
    #echo print_r($user->getResults(),true);
    #echo "\n";
    // Setup and render via twig. Uses hook_theme.
    $user_id = $user->getId();
    $msg_data = ['#theme' => 'dd_bill_alerts', '#elements' => []];
    $msg_data['#elements']['user_name'] = $user->getName();
    $msg_data['#elements']['user_id'] = $user_id;
    $msg_data['#elements']['results'] = $user->getResults();
    $msg_data['#elements']['base_url'] = $GLOBALS['base_url'];
    $msg_data['#elements']['site_name'] = \Drupal::config('system.site')->get('name'); 
    $msg_data['#elements']['wl_id'] = $wl_id;
    $msg_data['#elements']['logo'] = $logo;
    $content = \Drupal::service('renderer')->renderRoot($msg_data);
    $params['body'] = $content->__toString();

    $params['subject'] = "Digital Democracy Bill Alert";
    $email_to = "To: " . \Drupal\user\Entity\User::load($user_id)->getEmail(); // @debug
    \Drupal::service('plugin.manager.mail')
      ->mail('dd_bill_alerts', 'bill_alert',
        $email_to, 'en', $params,
        NULL, true);
    \Drupal::logger('dd_bill_alerts')
      ->notice("dd_bill_alerts sent bill alert email " . $email_to);
  }


  #echo "\nFinished running bill alerts.\n";
}

/**
 * Implements hook_mail().
 */
function dd_bill_alerts_mail($key, &$message, $params) {
  switch ($key) {
    case 'bill_alert':
      $message['headers']['Content-Type'] =
        'text/html; charset=UTF-8; format=flowed; delsp=yes';
      $message['from'] = \Drupal::config('system.site')->get('mail');
      $message['subject'] = $params['subject'];
      $message['body'][] = Html::escape($params['body']);
      break;
  }
}

/**
 * Implements hook_cron().
 */
function dd_bill_alerts_cron() {
  dd_bill_alerts_run();
}

/**
 * Implements hook_theme().
 */
function dd_bill_alerts_theme($existing, $type, $theme, $path) {
  $variables = array(
    'dd_bill_alerts' => array(
      'variables' => array(
        'elements' => NULL,
      ),
      'template' => 'dd-bill-alerts',
    ),
  );
  return $variables;
}



/**
 * Implements hook_theme_suggestions_alter().
 */
function dd_bill_alerts_theme_suggestions_dd_bill_alerts_alter(array &$suggestions, array $variables) {
  if (DdBase::getSiteType() == \Drupal\dd_base\DdEnvironment::DD_ENVIRONMENT_SITE_TYPE_WHITELABEL) {
    // Add template suggestion, will look in themes/custom/dd/templates/emails.
    $suggestions[] = 'dd_bill_alerts__' . DdBase::getWhiteLabelId();
  }
}
